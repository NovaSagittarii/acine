syntax = "proto3";

package ac;

import "frame.proto";
import "position.proto";

message Routine {
  uint32 id = 1;              // metadata
  string name = 2;            // metadata
  string description = 3;     // metadata
  repeated Frame frames = 4;  // indexed by id
  repeated State states = 5;  // indexed by id
  repeated Node nodes = 6;    // indexed by id

  message State {
    uint64 id = 1;
    string name = 2;
    string description = 3;
    repeated uint32 samples = 4;  // samples for this state; indexes into frames

    // region of interest; used to restrict area of interest in samples
    // ! probably want to remove in favor of condition image region match?
    ac.Rect region = 5;
  }

  message Node {
    uint64 id = 1;
    string name = 2;
    string description = 3;

    uint32 state_id = 4;      // indexes into states (for recongition)
    repeated Edge edges = 5;  // transitions

    NodeType type = 6;
    enum NodeType {
      NODE_TYPE_UNSPECIFIED = 0;
      NODE_TYPE_STANDARD = 1;  // normal node
      NODE_TYPE_INIT = 2;      // starting node; referenced by subroutines
      NODE_TYPE_RETURN = 4;    // subroutine end
    }
  }

  message Edge {
    uint64 to = 1;                // id of next node; from node is edge's parent
    Condition precondition = 2;   // required before you can take it
    Condition postcondition = 3;  // used to validate success
    int32 limit = 4;  // how many times this can be taken, negative is unlimited
    string description = 5;
    oneof action {              // can be an action, or null action;
      Point click = 11;         // click here
      Rect click_region = 12;   // click anywhere here
      PointSequence drag = 13;  // drag through these points
      uint64 subroutine = 14;   // execute subroutine (node_id)
    };
  }
}

/**
 * Primarily used for verification; a check (precondition/postcondition)
 * that must pass before an action can happen and
 * used to verify whether an action succeeded.
 *
 * Also used to detect and react to changes (for null actions).
 */
message Condition {
  uint32 timeout = 1;   // ms; after timeout, ignore condition; defaults to INF
  uint32 predelay = 2;  // ms; defaults to 0; required time before considering
  uint32 interval = 3;  // ms; defaults to 100; time between checks
  repeated uint32 records = 11;  // past waiting periods (data collection)
  oneof condition {              // what to check; by default ALWAYS TRUE
    Image image = 21;            // image match
    Text text = 22;              // text match
  }

  message Image {          // wants to ensure some pixels match
    uint32 frame_id = 1;   // actual payload to check
    double tolerance = 2;  // required similarity to pass; between 0.0 and 1.0
    repeated Rect regions = 3;  // section that it checks
  }

  message Text {                // wants to ensure it finds some text
    string regex = 1;           // regex match pattern
    repeated Rect regions = 2;  // restricts detect area; defaults to unlimited
  }
}

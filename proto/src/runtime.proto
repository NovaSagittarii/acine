// Handles routing and listens for routing goals

syntax = "proto3";

package ac;

import "google/protobuf/empty.proto";
import "routine.proto";

service Runtime {
  // Fetches where the current node is
  rpc GetCurrentNode(google.protobuf.Empty) returns (Routine.Node) {}

  rpc SetNode(Routine.Node) returns (google.protobuf.Empty) {}

  rpc GoToNode(Routine.Node) returns (google.protobuf.Empty) {}
}

message RuntimeState {
  Routine.Node current_node = 1;  // current node
  Routine.Node target_node = 2;   // desired target node
  Routine.Edge current_edge = 3;  // current processed edge, null if idling
  repeated Routine.Node stack_nodes = 4;  // return stack
}

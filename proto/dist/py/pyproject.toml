[build-system]
# A list of packages that are needed to build your package:
requires = ["setuptools>=61.0"]  # REQUIRED if [build-system] table is used
# The name of the Python object that frontends will use to perform the build:
build-backend = "setuptools.build_meta"  # If not defined, then legacy behavior can happen.


[project]
name = "acine_proto_dist"
version = "0.0.1"
description = "autogenerated python protobufs for acine"
readme = "README.md"
requires-python = ">=3.8"
# license = {file = "LICENSE.txt"}
# keywords = ["sample", "setuptools", "development"]
authors = [{ name = "Thomas Li", email = "tli186@ucr.edu" }]
# maintainers = [
#   {name = "A. Great Maintainer", email = "maintainer@example.com" }
# ]

classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Build Tools",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3 :: Only",
]

# This field lists other packages that your project depends on to run.
# Any package you put here will be installed by pip when your project is
# installed, so they must be valid existing projects.
#
# For an analysis of this field vs pip's requirements files see:
# https://packaging.python.org/discussions/install-requires-vs-requirements/
dependencies = [
  "grpcio==1.71.0",
  "protobuf==5.29.4",
]

[tool.setuptools]
package-dir = { "" = "." }
# package-dir = { "" = "src" }

# weird recursion bug (EXACTLY because of the `package-dir = "."` above)
# see https://github.com/pypa/setuptools/issues/4076
[tool.setuptools.packages.find]
exclude = ["build", "build*"]
